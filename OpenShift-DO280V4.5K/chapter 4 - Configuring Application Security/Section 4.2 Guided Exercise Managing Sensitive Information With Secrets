Guided Exercise: Managing Sensitive Information With Secrets
In this exercise, you will manage information using secrets.

Outcomes

You should be able to:

Manage secrets and use them to initialize environment variables in applications.

Use secrets for a MySQL database application.

Assign secrets to an application that connects to a MySQL database.

As the student user on the workstation machine, use the lab command to prepare your system for this exercise.

This command ensures that the cluster API is reachable and downloads the resource files necessary for this exercise.

[student@workstation ~]$ lab authorization-secrets start
Log in to the OpenShift cluster and create the authorization-secrets project.

Log in to the cluster as the developer user.

[student@workstation ~]$ oc login -u developer -p developer \
>    https://api.ocp4.example.com:6443
Login successful.
...output omitted...
Create the authorization-secrets project.

[student@workstation ~]$ oc new-project authorization-secrets
Now using project "authorization-secrets" on server
"https://api.ocp4.example.com:6443".
...output omitted...
Create a secret with the credentials and connection information to access a MySQL database.

[student@workstation ~]$ oc create secret generic mysql \
>   --from-literal user=myuser --from-literal password=redhat123 \
>   --from-literal database=test_secrets --from-literal hostname=mysql 
secret/mysql created
Deploy a database and add the secret for user and database configuration.

Try to deploy an ephemeral database server. This should fail because the MySQL image needs environment variables for its initial configuration. The values for these variables cannot be assigned from a secret using the oc new-app command.

[student@workstation ~]$ oc new-app --name mysql \
>   --docker-image registry.access.redhat.com/rhscl/mysql-57-rhel7:5.7-47
--> Creating resources ...
    imagestream.image.openshift.io "mysql" created
    deployment.apps "mysql" created
    service "mysql" created
--> Success
...output omitted...
Run the oc get pods command with the -w option to retrieve the status of the deployment in real time. Notice how the database pod is in a failed state. Press Ctrl+C to exit the command.

[student@workstation ~]$ oc get pods -w
NAME                     READY   STATUS   RESTARTS   AGE
mysql-786bb947f9-qz2fm   0/1     Error    3          71s
mysql-786bb947f9-qz2fm   0/1     CrashLoopBackOff   3          75s
mysql-786bb947f9-qz2fm   0/1     Error              4          103s
mysql-786bb947f9-qz2fm   0/1     CrashLoopBackOff   4          113s
NOTE
It might take a while for the pod to reach the error state.

Use the mysql secret to initialize environment variables on the mysql deployment. The deployment needs the MYSQL_USER, MYSQL_PASSWORD, and MYSQL_DATABASE environment variables for a successful initialization. The secret has the user, password, and database keys that can be assigned to the deployment as environment variables, adding the prefix MYSQL_.

[student@workstation ~]$ oc set env deployment/mysql --from secret/mysql \
>   --prefix MYSQL_
deployment.apps/mysql updated
To demonstrate how a secret can be mounted as a volume, mount the mysql secret to the /run/kubernetes/mysql directory within the pod.

[student@workstation ~]$ oc set volume deployment/mysql --add --type secret \
>   --mount-path /run/secrets/mysql --secret-name mysql
info: Generated volume name: volume-nrh7r
deployment.apps/mysql volume updated
Modifying the deployment using the oc set env command or the oc set volume command triggers a new application deployment. Verify that the mysql application deploys successfully after the modifications.

[student@workstation ~]$ oc get pods
NAME                     READY   STATUS    RESTARTS   AGE
mysql-7cd7499d66-gm2rh   1/1     Running   0          21s
Take note of the pod name in the Running state; you will need it in upcoming steps.

Verify that the database now authenticates using the environment variables initialized from the mysql secret.

Open a remote shell session to the mysql pod in the Running state.

[student@workstation ~]$ oc rsh mysql-7cd7499d66-gm2rh
sh-4.2$
Start a MySQL session to verify that the environment variables initialized by the mysql secret were used to configure the mysql application.

sh-4.2$ mysql -u myuser --password=redhat123 test_secrets -e 'show databases;'
mysql: [Warning] Using a password on the command line interface can be insecure.
+--------------------+
| Database           |
+--------------------+
| information_schema |
| test_secrets       |
+--------------------+
List mount points in the pod containing the mysql pattern. Notice that the mount point is backed by a temporary file system (tmpfs). This is true for all secrets that are mounted as volumes.

sh-4.2$ df -h | grep mysql
tmpfs        7.9G   16K  7.9G   1% /run/secrets/mysql
Examine the files mounted at the /run/secrets/mysql mount point. Each file matches a key name in the secret, and the content of each file is the value of the associated key.

sh-4.2$ for FILE in $(ls /run/secrets/mysql)
> do
> echo "${FILE}: $(cat /run/secrets/mysql/${FILE})"
> done
database: test_secrets
hostname: mysql
password: redhat123
user: mysql
Close the remote shell session to continue from your workstation machine.

sh-4.2$ exit
exit
[student@workstation ~]$
Create a new application that uses the MySQL database.

Create a new application using the redhattraining/famous-quotes image from Quay.io.

[student@workstation ~]$ oc new-app --name quotes \
>   --docker-image quay.io/redhattraining/famous-quotes:2.1
--> Found container image 7ff1a7b (2 days old) from quay.io for "quay.io/redhattraining/famous-quotes:2.1"
...output omitted...
--> Creating resources ...
    imagestream.image.openshift.io "quotes" created
    deployment.apps "quotes" created
    service "quotes" created
--> Success
...output omitted...
Verify the status of the quotes application pod. The pod displays an error because it cannot connect to the database. This might take a while to display in the output. Press Ctrl+C to exit the command.

[student@workstation ~]$ oc get pods -l deployment=quotes -w
NAME                      READY   STATUS             RESTARTS   AGE
quotes-6b658d57bc-vsz8q   0/1     CrashLoopBackOff   3          86s
quotes-6b658d57bc-vsz8q   0/1     Error              4          108s
quotes-6b658d57bc-vsz8q   0/1     CrashLoopBackOff   4          2m1s
The quotes application requires the following environment variables: QUOTES_USER, QUOTES_PASSWORD, QUOTES_DATABASE, and QUOTES_HOSTNAME, which correspond to the user, password, database, and hostname keys of the mysql secret. The mysql secret can initialize environment variables for the quotes application by adding the QUOTES_ prefix.

Use the mysql secret to initialize the environment variables that the quotes application needs to connect to the database.

[student@workstation ~]$ oc set env deployment/quotes --from secret/mysql \
>   --prefix QUOTES_
deployment.apps/quotes updated
Wait until the quotes application pod redeploys. The older pods terminate automatically.

[student@workstation ~]$ oc get pods -l deployment=quotes
NAME                      READY   STATUS    RESTARTS   AGE
quotes-77df54758b-mqdtf   1/1     Running   3          7m17s
NOTE
It might take a while for the pod to finish the deployment.

Verify that the quotes pod successfully connects to the database and that the application displays a list of quotes.

Examine the pod logs using the oc logs command. The logs indicate a successful database connection.

[student@workstation ~]$ oc logs quotes-77df54758b-mqdtf | head -n2
... Connecting to the database: myuser:redhat123@tcp(mysql:3306)/test_secrets
... Database connection OK
Expose the quotes service so that it can be accessed from outside the cluster.

[student@workstation ~]$ oc expose service quotes \
>    --hostname quotes.apps.ocp4.example.com
route.route.openshift.io/quotes exposed
Verify the application host name.

[student@workstation ~]$ oc get route quotes
NAME     HOST/PORT                      PATH   SERVICES   PORT       ...
quotes   quotes.apps.ocp4.example.com          quotes     8000-tcp   ...
Verify that the variables are properly set in the application by accessing the env REST API entry point.

[student@workstation ~]$ curl -s \
>   http://quotes.apps.ocp4.example.com/env | grep QUOTES_
                <li>QUOTES_USER: myuser </li>
                <li>QUOTES_PASSWORD: redhat123 </li>
                <li>QUOTES_DATABASE: test_secrets</li>
                <li>QUOTES_HOST: mysql</li>
Access the application status REST API entry point to test the database connection.

[student@workstation ~]$ curl -s http://quotes.apps.ocp4.example.com/status
Database connection OK
Test application functionality by accessing the random REST API entry point.

[student@workstation ~]$ curl -s http://quotes.apps.ocp4.example.com/random
8: Those who can imagine anything, can create the impossible.
- Alan Turing
Remove the authorization-secrets project.

[student@workstation ~]$ oc delete project authorization-secrets
project.project.openshift.io "authorization-secrets" deleted
Finish

On the workstation machine, run the lab command to complete this exercise.

[student@workstation ~]$ lab authorization-secrets finish
This concludes the section.
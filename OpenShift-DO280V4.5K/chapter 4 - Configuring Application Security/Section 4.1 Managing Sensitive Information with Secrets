
Chapter 4. Configuring Application Security
Managing Sensitive Information with Secrets
Guided Exercise: Managing Sensitive Information With Secrets
Controlling Application Permissions with Security Context Constraints
Guided Exercise: Controlling Application Permissions with Security Context Constraints
Lab: Configuring Application Security
Summary
Abstract

Goal	Restrict permissions of applications using security context constraints and protect access credentials using secrets.
Objectives	
Create and apply secrets to manage sensitive information.

Create service accounts and apply permissions.

Sections	
Managing Sensitive Information with Secrets (and Guided Exercise)

Controlling Application Permissions with Security Context Constraints (and Guided Exercise)

Lab	
Configuring Application Security

Managing Sensitive Information with Secrets
Objectives
After completing this section, you should be able to:

Create and apply secrets to manage sensitive information.

Share secrets between applications.

Secrets Overview
Modern applications are designed to loosely couple code, configuration, and data. Configuration files and data are not hard-coded as part of the software. Instead, the software loads configuration and data from an external source. This enables deploying an application to different environments without requiring a change to the application source code.

Applications often require access to sensitive information. For example, a back-end web application requires access to database credentials to perform a database query.

Kubernetes and OpenShift use secret resources to hold sensitive information, such as:

Passwords.

Sensitive configuration files.

Credentials to an external resource, such as an SSH key or OAuth token.

A secret can store any type of data. Data in a secret is Base64-encoded, not stored in plain text. Secret data is not encrypted; you can decode the secret from Base64 format to access the original data.

Although secrets can store any type of data, Kubernetes and OpenShift support different types of secrets. Different types of secret resources exist, including service account tokens, SSH keys, and TLS certificates. When you store information in a specific secret resource type, Kubernetes validates that the data conforms to the type of secret.

NOTE
You can encrypt the Etcd database, although this is not the default setting. When enabled, Etcd encrypts the following resources: secrets, configuration maps, routes, OAuth access tokens, and OAuth authorize tokens. Enabling Etcd encryption is outside the scope of this class.

Features of Secrets
The main features of secrets include:

Secret data can be shared within a project namespace.

Secret data is referenced independently of secret definition. Administrators can create and manage a secret resource that other team members can reference in their deployment configurations.

Secret data is injected into pods when OpenShift creates a pod. You can expose a secret as an environment variable or as a mounted file in the pod.

If the value of a secret changes during pod execution, the secret data in the pod does not update. After a secret value changes, you must create new pods to inject the new secret data.

Any secret data that OpenShift injects into a pod is ephemeral. If OpenShift exposes sensitive data to a pod as environment variables, then those variables are destroyed when the pod is destroyed.

Secret data volumes are backed by temporary file storage. If a secret is mounted as a file in the pod, then the file is also destroyed when the pod is destroyed. A stopped pod does not contain secret data.

Use Cases for Secrets
Two primary use cases for secrets are storing credentials and securing communication between services.

Credentials
Store sensitive information, such as passwords and user names, in a secret.

If an application expects to read sensitive information from a file, then you mount the secret as a data volume to the pod. The application can read the secret as an ordinary file to access the sensitive information. Some databases, for example, read credentials from a file to authenticate users.

Some applications use environment variables to read configuration and sensitive data. You can link secret variables to pod environment variables in a deployment configuration.

Transport Layer Security (TLS) and Key Pairs
Use a TLS certificate and key to secure communication to a pod. A TLS secret stores the certificate as tls.crt and the certificate key as tls.key. Developers can mount the secret as a volume and create a pass through route to the application.

Creating a Secret
If a pod requires access to sensitive information, then create a secret for the information before you deploy the pod.

Create a generic secret containing key-value pairs from literal values typed on the command line:

[user@demo ~]$ oc create secret generic secret_name \
>    --from-literal key1=secret1 \
>    --from-literal key2=secret2
Create a generic secret using key names specified on the command line and values from files:

[user@demo ~]$ oc create secret generic ssh-keys \
>    --from-file id_rsa=/path-to/id_rsa \
>    --from-file id_rsa.pub=/path-to/id_rsa.pub
Create a TLS secret specifying a certificate and the associated key:

[user@demo ~]$ oc create secret tls secret-tls \
>    --cert /path-to-certificate --key /path-to-key
Exposing Secrets to Pods
To expose a secret to a pod, first create the secret. Assign each piece of sensitive data to a key. After creation, the secret contains key-value pairs.

The following command creates a generic secret named demo-secret with two keys: user with the demo-user value and root_password with the zT1KTgk value.

[user@demo ~]$ oc create secret generic demo-secret \
>    --from-literal user=demo-user
>    --from-literal root_password=zT1KTgk 
Secrets as Pod Environment Variables
Consider a database application that reads the database administrator password from the MYSQL_ROOT_PASSWORD environment variable. Modify the environment variables section of the deployment configuration to use values from the secret:

env:
  - name: MYSQL_ROOT_PASSWORD 1
    valueFrom:
      secretKeyRef: 2
        name: demo-secret 3
        key: root_password 4
1

The environment variable name in the pod that contains data from a secret.

2

The secretKeyRef key expects a secret. Use the configMapKeyRef key for configuration maps.

3

The name of the secret that contains the desired sensitive information.

4

The name of the key that contains the sensitive information in the secret.

You can also use the oc set env command to set application environment variables from either secrets or configuration maps. In some cases, the names of the keys can be modified to match the names of environment variables by using the --prefix option. In the following example, the user key sets the MYSQL_USER environment variable, and the root_password key sets the MYSQL_ROOT_PASSWORD environment variable. If the key name is lowercase, then the corresponding environment variable is converted to uppercase.

[user@demo ~]$ oc set env deployment/demo --from secret/demo-secret \
>    --prefix MYSQL_
Secrets as Files in a Pod
A secret can be mounted to a directory within a pod. A file is created for each key in the secret using the name of the key. The content of each file is the decoded value of the secret.

[user@demo ~]$ oc set volume deployment/demo \ 1
>    --add --type secret \ 2
>    --secret-name demo-secret \ 3
>    --mount-path /app-secrets 4
1

Modify the volume configuration in the demo deployment.

2

Add a new volume from a secret. Configuration maps can also be mounted as volumes.

3

Use the demo-secret secret.

4

Make the secret data available in the /app-secrets directory in the pod. The content of the /app-secrets/user file is demo-user. The content of the /app-secrets/root_password file is zT1KTgk.

The container image can dictate the location of the mount point and the expected file names. For example, a container image running NGINX can specify the SSL certificate location and the SSL certificate key location in the /etc/nginx/nginx.conf configuration file. If the expected files are not found, then the container might fail to run.

IMPORTANT
If the mount point already exists in the pod, then any existing files at the mount point are obscured by the mounted secret. The existing files are not visible and are not accessible.

Configuration Map Overview
Similar to secrets, configuration maps decouple configuration information from container images. Unlike secrets, the information contained in configuration maps does not require protection. You can use the data in a configuration map to set environment variables in the container image, or mount the configuration map as a volume within the container image.

Container images do not need to be rebuilt when a secret or a configuration map changes. New pods use the updated secrets and configuration maps. You can delete pods using the older secrets and configuration maps.

The syntax for creating a configuration map closely matches the syntax for creating a secret. Key-value pairs can be entered on the command line or the content of a file can be used as the value of a specified key.

[user@demo ~]$ oc create configmap my-config \
>    --from-literal key1=config1 --from-literal key2=config2
Updating Secrets and Configuration Maps
Secrets and configuration maps occasionally require updates. Use the oc extract command to ensure you have the latest data. Save the data to a specific directory using the --to option. Each key in the secret or configuration map creates a file with the same name as the key. The content of each file is the value of the associated key. If you run the oc extract command more than once, then use the --confirm option to overwrite the existing files.

[user@demo ~]$ oc extract secret/htpasswd-ppklq -n openshift-config \
>    --to /tmp/ --confirm
After updating the locally saved files, use the oc set data command to update the secret or configuration map. For each key that requires an update, specify the name of a key and the associated value. If a file contains the value, use the --from-file option.

In the previous oc extract example, the htpasswd-ppklq secret contained only one key named htpasswd. Using the oc set data command, you can explicitly specify the htpasswd key name using --from-file htpasswd=/tmp/htpasswd. If the key name is not specified, the file name is used as the key name.

[user@demo ~]$ oc set data secret/htpasswd-ppklq -n openshift-config \
>    --from-file /tmp/htpasswd
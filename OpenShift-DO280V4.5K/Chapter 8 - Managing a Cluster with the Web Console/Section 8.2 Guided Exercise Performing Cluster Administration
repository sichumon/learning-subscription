Guided Exercise: Performing Cluster Administration
In this exercise, you will perform cluster administration with the web console.

Outcomes

You should be able to use the OpenShift web console to:

Find resources associated with an operator.

Review a pod's status, YAML definition, and logs.

View and edit cluster configuration resources.

Create a new project and configure its resource quotas, limit ranges, and role-based access control (RBAC).

As the student user on the workstation machine, use the lab command to prepare your system for this exercise.

This command ensures that the cluster API is reachable and creates the resources required for this exercise.

[student@workstation ~]$ lab console-admin start
As the admin user, locate and navigate to the OpenShift web console.

Log in to your OpenShift cluster as the admin user.

[student@workstation ~]$ oc login -u admin -p redhat \
>    https://api.ocp4.example.com:6443
Login successful.
...output omitted...
Identify the URL for the web console.

[student@workstation ~]$ oc whoami --show-console
https://console-openshift-console.apps.ocp4.example.com
Open a web browser and navigate to https://console-openshift-console.apps.ocp4.example.com.

Click Advanced to reveal the untrusted certificate message, and then click Add Exception. In the Add Security Exception dialog box, click Confirm Security Exception.

You need to do this twice to skip the warnings about the self-signed SSL certificate for both the console-openshift-console and oauth-openshift subdomains.

Click localusers and log in as the admin user with the redhat password.

Review the openshift-console-operator and openshift-console pod logs.

In the Red Hat OpenShift Container Platform web UI, click Home → Projects to display the Projects page.

Type console in the Search by name field, and then click the openshift-console-operator link.


Click Workloads and then click 1 of 1 pods to navigate to the console-operator replica set. Click the pod name marked by the P icon to navigate to the console-operator pod.


Review the Pod Details page and notice the pod metrics, running status, and volumes.

Click YAML to navigate to the pod resource editor.

Click Logs to view the console operator logs.

Open the Project list and type openshift-console to switch to the openshift-console project.


Click the first pod in the table and then click Logs to view the console pod logs.

Review the Console, Image, and OAuth cluster settings.

Click Administration → Cluster Settings to view the Cluster Settings page. Notice that information about the cluster's update channel and current version are listed at the top and a section for the cluster's update history is listed further below.

Click Global Configuration to navigate to the list of cluster configuration resources.

Click Console and then click YAML to review the Console resource.

Return to the Cluster Settings Global Configuration page. Click Image and then click YAML. Notice the internalRegistryHostname is configured to use the internal image registry.

Return to the Cluster Settings Global Configuration page and click OAuth. The OAuth Details page has a special section for listing and adding identity providers. Navigate to the YAML page to view additional configuration details.

Review the admin, edit, and view cluster roles.

Click User Management → Roles to view the Roles page.

Click admin next to the CR icon. Review the Rules table which describes the allowed actions for various resources.


Return to the Cluster Roles page and click the cluster role named edit to view the edit cluster role details.

Return to the Cluster Roles page and type view in the Search by name field. Click the cluster role named view to navigate to the view cluster role details. Notice that this role only allows get, list, and watch actions on the listed resources.

Add a tester user entry to the localusers secret.

In the OpenShift Container Platform web UI, click Workloads → Secrets, and then select openshift-config from the Project filter list to display the secrets for the openshift-config project.

Use the filter or scroll to the bottom of the page to locate and then click the localusers link.

Click Actions → Edit Secret at the upper right of the page to navigate to the Edit Key/Value Secret tool.

Use the workstation terminal to generate an htpasswd entry using redhat as the password.

[student@workstation ~]$ htpasswd -n -b tester redhat
tester:$apr1$oQ3BtWOp.HtW97.$wVbJBofBNsNd4sd
Append the terminal output from the htpasswd command to the htpasswd value in the OpenShift web console's secrets editor, and then click Save.

admin:$apr1$Au9.fFr$0k5wvUBd3eeBt0baa77.dae
leader:$apr1$/abo4Hybn7a.tG5ZoOBn.QWefXckiy1
developer:$apr1$RjqTY4cv$xql3.BQfg42moSxwnTNkh.
tester:$apr1$oQ3BtWOp.HtW97.$wVbJBofBNsNd4sd
Create and configure a new project named console-apps.

Click Home → Projects to view the Projects page, and then click Create Project.

Use the following information for the new project, and then click Create.

Table 8.1. Create Project Form

Field	Value
Name	console-apps
Display Name	Console chapter applications
Description	Example project

Click Administration → Resource Quotas, and then click Create Resource Quota. Modify the YAML document as follows:

apiVersion: v1
kind: ResourceQuota
metadata:
  name: quota
  namespace: console-apps
spec:
  hard:
    pods: '10'
    requests.cpu: '2'
    requests.memory: 8Gi
    limits.cpu: '4'
    limits.memory: 12Gi
Click Create.

Click Administration → Limit Ranges, and then click Create Limit Range. Modify the YAML document to specify a name for the limit range. Specify default memory and CPU container limits and requests:

apiVersion: v1
kind: LimitRange
metadata:
  name: limit-range
  namespace: console-apps
spec:
  limits:
    - default:
        cpu: 500m
        memory: 5Gi
      defaultRequest:
        cpu: 10m
        memory: 100Mi
      type: Container
Click Create.

Click User Management → Groups, and then click Create Group and use the editor to define a Group resource as follows:

apiVersion: user.openshift.io/v1
kind: Group
metadata:
  name: project-team
users:
  - developer
  - tester
Click Create to create the new project-team group.

Click User Management → Role Bindings, and then click Create Binding. Fill out the form as follows to create a role binding for the project-team group.

Table 8.2. Team Role Binding Form

Field	Value
Binding Type	Namespace Role Binding (RoleBinding)
Name	team
Namespace	console-apps
Role Name	edit
Subject	Group
Subject Name	project-team

Click Create to create the namespaced RoleBinding.

Return to the Role Bindings page and click Create Binding to create a role binding for the leader user. Fill out the form as follows:

Table 8.3. Leader Role Binding Form

Field	Value
Binding Type	Namespace Role Binding (RoleBinding)
Name	leader
Namespace	console-apps
Role Name	admin
Subject	User
Subject Name	leader

Click Create to create the namespaced RoleBinding.

Click admin → Log out, and then log back in as the developer user with the developer password.

Ensure that the developer account can only see the console-apps project.

NOTE
Previous projects from guided exercises that were not deleted upon completion may also display in the list.

You will continue to use the new console-apps project in the next section, so you do not need to delete it.

Finish

On the workstation machine, use the lab command to complete this exercise. This is important to ensure that resources from previous exercises do not impact upcoming exercises.

[student@workstation ~]$ lab console-admin finish

Introducing OpenShift Dynamic Storage
Objectives
After completing this section, you should be able to identify the components and resources of persistent storage and deploy an application that uses a persistent volume claim.

Persistent Storage Overview
Containers have ephemeral storage by default. For example, when a container is deleted, all the files and data inside it are deleted also. To preserve the files, containers offer two main ways of maintaining persistent storage: volumes and bind mounts. Volumes are the preferred OpenShift way of managing persistent storage. Volumes are managed manually by the administrator or dynamically through a storage class. Developers working with containers on a local system can mount a local directory into a container using a bind mount.

OpenShift cluster administrators use the Kubernetes persistent volume framework to manage persistent storage for the users of a cluster. There are two ways of provisioning storage for the cluster: static and dynamic. Static provisioning requires the cluster administrator to create persistent volumes manually. Dynamic provisioning uses storage classes to create the persistent volumes on demand.

The OpenShift Container Platform uses storage classes to allow administrators to provide persistent storage. Storage classes are a way to describe types of storage for the cluster and provision dynamic storage on demand.

Developers use persistent volume claims to add persistent volumes dynamically to their applications; it is not necessary for the developer to know details of the storage infrastructure. With static provisioning, developers use precreated PVs or ask a cluster administrator to manually create persistent volumes for their applications.

A persistent volume claim (PVC) belongs to a specific project. To create a PVC, you must specify the access mode and size, among other options. Once created, a PVC cannot be shared between projects. Developers use a PVC to access a persistent volume (PV). Persistent volumes are not exclusive to projects and are accessible across the entire OpenShift cluster. When a persistent volume binds to a persistent volume claim, the persistent volume cannot be bound to another persistent volume claim.

Persistent Volume and Persistent Volume Claim Life Cycle
Persistent volume claims request persistent volume resources. To be eligible, a PV must not be bound to another PVC. Additionally, the PV must provide the access mode specified in the PVC and it must be at least as large as the size requested in the PVC. A PVC can specify additional criteria, such as the name of a storage class. If a PVC cannot find a PV that matches all criteria, the PVC enters a pending state and waits until an appropriate PV becomes available. A cluster administrator can manually create the PV or a storage class can dynamically create the PV. A bound persistent volume can be mounted as a volume to a specific mount point in the pod (for example, /var/lib/pgsql for a PostgreSQL database).

Verifying the Dynamic Provisioned Storage
Use the oc get storageclass command to view available storage classes. The output identifies the default storage class. If a storage class exists, then persistent volumes are created dynamically to match persistent volume claims. A persistent volume claim that does not specify a storage class uses the default storage class.

[user@demo ~]$ oc get storageclass
NAME                    PROVISIONER               ...
nfs-storage (default)   nfs-storage-provisioner   ...
NOTE
The classroom environment uses an external, open source NFS provisioner. The provisioner dynamically creates NFS persistent volumes from an existing NFS server. Red Hat does not recommend using this provisioner in production environments.

Deploying Dynamically Provisioned Storage
To add a volume to an application create a PersistentVolumeClaim resource and add it to the application as a volume. Create the persistent volume claim using either a Kubernetes manifest or the oc set volumes command. In addition to either creating a new persistent volume claim or using an existing persistent volume claim, the oc set volumes command can modify a deployment or a deployment configuration to mount the persistent volume claim as a volume within the pod.

To add a volume to an application, use the oc set volumes command:

[user@demo ~]$ oc set volumes deployment/example-application \
>   --add --name example-storage --type pvc --claim-class nfs-storage \
>   --claim-mode rwo --claim-size 15Gi --mount-path /var/lib/example-app \
>   --claim-name example-storage
The command creates a persistent volume claim resource and adds it to the application as a volume within the pod.

The following YAML example specifies a persistent volume claim.

To create a PersistentVolumeClaim API object:

apiVersion: v1
kind: PersistentVolumeClaim 1
metadata:
  name: example-pv-claim 2
  labels:
    app: example-application
spec:
  accessModes:
    - ReadWriteOnce 3
  resources:
    requests:
      storage: 15Gi 4
1

Indicates that it is a persistent volume claim.

2

The name to use in the claimName field of the persistentVolumeClaim element in the volumes section of a deployment manifest.

3

The storage class provisioner must provide this access mode. If persistent volumes are created statically, then an eligible persistent volume must provide this access mode.

4

The storage class will create a persistent volume matching this size request. If persistent volumes are created statically, then an eligible persistent volume must be at least the requested size.

OpenShift defines three access modes that are summarized in the following table.

Table 2.1.  

Access Mode	CLI Abbreviation	Description
ReadWriteMany	RWX	Kubernetes can mount the volume as read-write on many nodes.
ReadOnlyMany	ROX	Kubernetes can mount the volume as read-only on many nodes.
ReadWriteOnce	RWO	Kubernetes can mount the volume as read-write on only a single node.

To add the PVC to the application:

...output omitted...
spec:
   volumes:
     - name: example-pv-storage
       persistentVolumeClaim:
         claimName: example-pv-claim
   containers:
   - name: example-application
     image: registry.redhat.io/rhel8/example-app
     ports:
     - containerPort: 1234
     volumeMounts:
       - mountPath: "/var/lib/example-app"
         name: example-pv-storage
...output omitted...
Deleting Persistent Volume Claims
To delete a volume, use the oc delete command to delete the persistent volume claim. The storage class will reclaim the volume after the PVC is removed.

[user@demo ~]$ oc delete pvc/example-pvc-storage
 
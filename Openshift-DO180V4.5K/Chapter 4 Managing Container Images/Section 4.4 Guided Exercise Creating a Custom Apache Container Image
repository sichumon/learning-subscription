Guided Exercise: Creating a Custom Apache Container Image

In this guided exercise, you will create a custom Apache container image using the podman commit command.

Outcomes

You should be able to create a custom container image.

Open a terminal on workstation as the student user and run the following command:

[student@workstation ~]$ lab image-operations start
Log into your Quay.io account and start a container by using the image available at quay.io/redhattraining/httpd-parent. The -p option allows you to specify a redirect port. In this case, Podman forwards incoming requests on TCP port 8180 of the host to TCP port 80 of the container.

[student@workstation ~]$ sudo podman login quay.io
Username: your_quay_username
Password: your_quay_password
Login Succeeded!
[student@workstation ~]$ sudo podman run -d --name official-httpd \
> -p 8180:80 quay.io/redhattraining/httpd-parent
...output omitted...
Writing manifest to image destination
Storing signatures
3a6baecaff2b4e8c53b026e04847dda5976b773ade1a3a712b1431d60ac5915d
Your last line of output is different from the last line shown above. Note the first twelve characters.

Create an HTML page on the official-httpd container.

Access the shell of the container by using the podman exec command and create an HTML page.

[student@workstation ~]$ sudo podman exec -it official-httpd /bin/bash
bash-4.4# echo "DO180 Page" > /var/www/html/do180.html
Exit from the container.

bash-4.4# exit
Ensure that the HTML file is reachable from the workstation VM by using the curl command.

[student@workstation ~]$ curl 127.0.0.1:8180/do180.html
You should see the following output:

DO180 Page
Use the podman diff command to examine the differences in the container between the image and the new layer created by the container.

[student@workstation ~]$ sudo podman diff official-httpd
C /etc
C /root
A /root/.bash_history
...output omitted...
C /tmp
C /var
C /var/log
C /var/log/httpd
A /var/log/httpd/access_log
A /var/log/httpd/error_log
C /var/www
C /var/www/html
A /var/www/html/do180.html
NOTE
Often, web server container images label the /var/www/html directory as a volume. In these cases, any files added to this directory are not considered part of the container file system, and would not show in the output of the git diff command.

The quay.io/redhattraining/httpd-parent container image does not label the /var/www/html directory as a volume. As a result, the change to the /var/www/html/do180.html file is considered a change to the underlying container file system.

Create a new image with the changes created by the running container.

Stop the official-httpd container.

[student@workstation ~]$ sudo podman stop official-httpd
3a6baecaff2b4e8c53b026e04847dda5976b773ade1a3a712b1431d60ac5915d
Commit the changes to a new container image with a new name. Use your name as the author of the changes.

[student@workstation ~]$ sudo podman commit \
> -a 'Your Name' official-httpd do180-custom-httpd
Getting image source signatures
Skipping fetch of repeat blob sha256:071d8bd765171080d01682844524be57ac9883e...
...output omitted...
Copying blob sha256:1e19be875ce6f5b9dece378755eb9df96ee205abfb4f165c797f59a9...
 15.00 KB / 15.00 KB [=====================================================] 0s
Copying config sha256:8049dc2e7d0a0b1a70fc0268ad236399d9f5fb686ad4e31c7482cc...
 2.99 KB / 2.99 KB [=======================================================] 0s
Writing manifest to image destination
Storing signatures
31c3ac78e9d4137c928da23762e7d32b00c428eb1036cab1caeeb399befe2a23
List the available container images.

[student@workstation ~]$ sudo podman images
The expected output is similar to the following:

REPOSITORY                            TAG      IMAGE ID       CREATED   SIZE
localhost/do180-custom-httpd          latest   31c3ac78e9d4   ...       ...
quay.io/redhattraining/httpd-parent   latest   2cc07fbb5000   ...       ...
The image ID matches the first 12 characters of the hash. The most recent images are listed at the top.

Publish the saved container image to the container registry.

Load your classroom environment configuration.

Run the following command to load the environment variables created in the first guided exercise:

[student@workstation ~]$ source /usr/local/etc/ocp4.config
To tag the image with the registry host name and tag, run the following command.

[student@workstation ~]$ sudo podman tag do180-custom-httpd \
> quay.io/${RHT_OCP4_QUAY_USER}/do180-custom-httpd:v1.0
Run the podman images command to ensure that the new name has been added to the cache.

[student@workstation ~]$ sudo podman images
REPOSITORY                                         TAG      IMAGE ID       ...
localhost/do180-custom-httpd                       latest   31c3ac78e9d4   ...
quay.io/${RHT_OCP4_QUAY_USER}/do180-custom-httpd   v1.0     31c3ac78e9d4   ...
quay.io/redhattraining/httpd-parent                latest   2cc07fbb5000   ...
Publish the image to your Quay.io registry.

[student@workstation ~]$ sudo podman push \
> quay.io/${RHT_OCP4_QUAY_USER}/do180-custom-httpd:v1.0
Getting image source signatures
Copying blob sha256:071d8bd765171080d01682844524be57ac9883e53079b6ac66707e19...
 200.44 MB / 200.44 MB [================================================] 1m38s
...output omitted...
Copying config sha256:31c3ac78e9d4137c928da23762e7d32b00c428eb1036cab1caeeb3...
 2.99 KB / 2.99 KB [========================================================] 0s
Writing manifest to image destination
Copying config sha256:31c3ac78e9d4137c928da23762e7d32b00c428eb1036cab1caeeb3...
 0 B / 2.99 KB [------------------------------------------------------------] 0s
Writing manifest to image destination
Storing signatures
NOTE
Pushing the do180-custom-httpd image creates a private repository in your Quay.io account. Currently, private repositories are disallowed by Quay.io free plans. You can either create the public repository prior to pushing the image, or change the repository to public afterwards.

Verify that the image is available from Quay.io. The podman search command requires the image to be indexed by Quay.io. That may take some hours to occur, so use the podman pull command to fetch the image. This proves the availability for the image.

[student@workstation ~]$ sudo podman pull \
> -q quay.io/${RHT_OCP4_QUAY_USER}/do180-custom-httpd:v1.0
31c3ac78e9d4137c928da23762e7d32b00c428eb1036cab1caeeb3
Create a container from the newly published image.

Use the podman run command to start a new container. Use your_quay_username/do180-custom-httpd:v1.0 as the base image.

[student@workstation ~]$ sudo podman run -d --name test-httpd -p 8280:80 \
> ${RHT_OCP4_QUAY_USER}/do180-custom-httpd:v1.0
c0f04e906bb12bd0e514cbd0e581d2746e04e44a468dfbc85bc29ffcc5acd16c
Use the curl command to access the HTML page. Make sure you use port 8280.

This should display the HTML page created in the previous step.

[student@workstation ~]$ curl http://localhost:8280/do180.html
DO180 Page
Finish

On workstation, run the lab image-operations finish script to complete this lab.

[student@workstation ~]$ lab image-operations finish
This concludes the guided exercise.